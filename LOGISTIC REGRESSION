
#Importing the libraries
import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split as tts
from sklearn.linear_model import LogisticRegression as LLR
from sklearn.preprocessing import StanderdScaler as SSR

#importing the datasets
dataset=pd.read_csv('User_Data.csv')
x = dataset.iloc[:, [2, 3]].values 
y = dataset.iloc[:, 4].values 

#Spliting the dataset into training and test set
xtrain, xtest, ytrain, ytest = tts( 
		x, y, test_size = 0.25, random_state = 0) 

sc_x = SSR() 
xtrain = sc_x.fit_transform(xtrain) 
xtest = sc_x.transform(xtest) 


#Appling LOgisticRegression to training anmd test set
classifier = LLR(random_state = 0) 
classifier.fit(xtrain, ytrain) 


y_pred = classifier.predict(xtest) 


from sklearn.metrics import confusion_matrix 
cm = confusion_matrix(ytest, y_pred) 

print ("Confusion Matrix : \n", cm) 


from sklearn.metrics import accuracy_score 
print ("Accuracy : ", accuracy_score(ytest, y_pred)) 


from matplotlib.colors import ListedColormap 
X_set, y_set = xtest, ytest 
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, 
							stop = X_set[:, 0].max() + 1, step = 0.01), 
					np.arange(start = X_set[:, 1].min() - 1, 
							stop = X_set[:, 1].max() + 1, step = 0.01)) 

plt.contourf(X1, X2, classifier.predict( 
			np.array([X1.ravel(), X2.ravel()]).T).reshape( 
			X1.shape), alpha = 0.75, cmap = ListedColormap(('red', 'green'))) 

plt.xlim(X1.min(), X1.max()) 
plt.ylim(X2.min(), X2.max()) 

for i, j in enumerate(np.unique(y_set)): 
	plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], 
				c = ListedColormap(('red', 'green'))(i), label = j) 
	
plt.title('Classifier (Test set)') 
plt.xlabel('Age') 
plt.ylabel('Estimated Salary') 
plt.legend() 
plt.show() 
